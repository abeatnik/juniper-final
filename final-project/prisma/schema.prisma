// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//schema for NextAuth from: https://vercel.com/guides/nextjs-prisma-postgres

model Account {
  id                 String  @id @db.Uuid @default(uuid())
  userId             String  @db.Uuid @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @db.Uuid @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @db.Uuid @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id        String   @id @db.Uuid @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  email     String  @unique
  emailVerified DateTime?
  image     String?
  name      String?
  first     String?
  last      String?
  accounts  Account[]
  sessions  Session[]
  boards    Board[]
  @@map(name: "users")
}

model Board {
  id        String   @id @db.Uuid @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  title     String   @db.VarChar(255)
  users     User[]   
  stacks    Stack[]
  invites  Invite[]
}

model Stack {
  id        String   @id @db.Uuid @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  title     String   @db.VarChar(255)
  board     Board    @relation(fields: [boardId], references: [id])
  boardId   String   @db.Uuid
  cards     Card[]
}

model Card {
  id          String   @id @db.Uuid @default(uuid())
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
  title       String   @db.VarChar(255) 
  description String?  @db.Text
  stack       Stack    @relation(fields: [stackId], references: [id])
  stackId     String   @db.Uuid
}

model Invite {
  id          String   @id @db.Uuid @default(uuid())
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
  valid       Boolean  @default(true)
  board       Board    @relation(fields: [boardId], references: [id])
  boardId     String   @db.Uuid
}